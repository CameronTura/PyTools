CT_CodeTools

###################################################################################################################

>> For Loops:
Use for loops when there's a sequence of elements that you want to iterate.

>> While Loops:
Use while loops when you want to repeat an action until a condition changes


###################################################################################################################

>>> List Functions: []

When to use a List:
- ordered and changeable. Allows duplicate members.
- Use lists if you have a collection of data that does not need random access. 
- Choose lists when you need a simple, iterable collection that is modified frequently.

(len(nums))
(min(nums))
(max(nums))
zip(x,y)            creates a pair from each value from two lists
nums.append()		Adds an element at the end of the list
nums.clear()		Removes all the elements from the list
nums.copy()		    Returns a copy of the list
nums.count()		Returns the number of elements with the specified value
nums.index()		Returns the index of the first element with the specified value
nums.insert()		Adds an element at the specified position
nums.remove()		Removes the first item with the specified value
nums.reverse()		Reverses the order of the list
nums.sort()		    Sorts the list

if all([i > 5 for i in nums]): ...   checks all items in the list against an argument, returns True/False

if any([i % 2 == 0 for i in nums]): ...  checks any one of the items in the list against an argument, returns True/False

nums = [55, 44, 33, 22, 11]
for v in enumerate(nums):
    print(v)
output = 
(0, 55)
(1, 44)
(2, 33)
(3, 22)
(4, 11)


########################################################

>>> String Functions:

name = "Ash"
print(f"{name.upper()} is funny.")
Output = ASH is funny.

print("{0}{1}{2}".format("Ash ","is ","funny."))
Output = Ash is funny.

print("Base price: £{:.2f} Taxed price: £{:.2f}".format(7, 9))          -->    Base price: £7.00 Taxed price: £9.00

{:.2f}              .2f - format this as a float number, with two digits after the decimal dot. 
{:>3}               >  - align the text three spaces to the right


txt.upper()		    Converts a string into upper case
txt.lower()		    Converts a string into lower case
txt.split()		    Splits the string at the specified separator, and returns a list
txt.capitalize()	Converts the first character to upper case
txt.join()		    Converts the elements of an iterable into a string
txt.format()		Formats specified values in a string
txt.startswith()    Returns true if the string starts with the specified
txt.endswith()		Returns true if the string ends with the specified
txt.index()		    Searches the string for a specified value and returns the position
txt.replace()       replaces one substring in a string with another.
txt.strip()         removes any whitespace (spaces, and newlines) from the start and end of a string

########################################################

>>> Integer Functions:

abs(x)              Return the absolute value of a number. (-42 == 42)
round(x, 2)         rounds to the nearest number ( 2 = second number in the int)


########################################################

>>> Dictionary Functions: {key:value}

When to use a dictionary:
- When you need a logical association between a key:value pair.
- When you need fast lookup for your data, based on a custom key.
- When your data is being constantly modified. Remember, dictionaries are mutable.

dict1.clear()	    Removes all the elements from the dictionary
dict1.copy()    	Returns a copy of the dictionary
dict1.get()	        Returns the value of the specified key
dict1.items()		Returns a list containing a tuple for each key value pair
dict1.keys()		Returns a list containing the dictionary's keys
dict1.update()		Updates the dictionary with the specified key-value pairs
dict1.values()		Returns a list of all the values in the dictionary

########################################################

>>> Tuple Functions: ()

When to use a Tuple:
- ordered and unchangeable. Allows duplicate members.
- Use tuples when your data cannot change.

count()			    Returns the number of times a specified value occurs in a tuple
index()			    Searches the tuple for a specified value and returns the position

########################################################

>>> Set Functions: {}

When to use a Set:
- unordered, unchangeable, and unindexed. No duplicate members.
- Use a set if you need uniqueness for the elements.

add()			    Adds an element to the set
remove()		    Removes the specified element
clear()			    Removes all the elements from the set
copy()			    Returns a copy of the set
difference()		Returns a set containing the difference between two or more sets
intersection()		Returns a set, that is the intersection of two or more sets

first = {1, 2, 3, 4}
second = {4, 5, 6, 7}

print(first | second)       | combines two sets to form a new one containing items in either.
print(first & second)       & gets items only in both.
print(first - second)       - gets items in the first set but not in the second.
print(first ^ second)       ^ gets items in either set, but not both

###################################################################################################################

>>> import itertools

Infinite iterators:

itertools.count(10)                                 --> 10 11 12 13 14 ...
itertools.cycle('ABCD')                             --> A B C D A B C D ...
itertools.repeat(10, 3)                             --> 10 10 10

Iterators:

itertools.accumulate([1,2,3,4,5])                   --> 1 3 6 10 15
itertools.chain('ABC', 'DEF')                       --> A B C D E F
itertools.takewhile(lambda x: x<5, [1,4,6,4,1])     --> 1 4

Combinations:

itertools.product(("A", "B"), range(2))             --> [('A', 0), ('A', 1), ('B', 0), ('B', 1)]
itertools.permutations(("A", "B"))                  --> [('A', 'B'), ('B', 'A')]


###################################################################################################################

>>> import re

^   = match the start of a string
$   = match at the end of a string
[]  = Match a set of characters


pattern = r"spam"

if re.match(pattern, "eggspamsausagespam"):
    print("Match")
else:
    print("No match")                             --> No match 

match = re.search(pattern, "eggspamsausage")
if match:
    print(match.group())                          -->  spam
    print(match.start())                          -->  3
    print(match.end())                            -->  7
    print(match.span())                           -->  (3, 7)

print(re.findall(pattern, "eggspamsausagespam"))  --> ['spam', 'spam']

text = "My name is Cam."
newstr = re.sub("Cam, "Ash", text)
print(newstr)                                     --> My name is Ash.
  
nums = 0013414001
x = re.sub(r"^00","+", nums)
print(x)                                          --> +13414001      





