CT_CodeTools

###################################################################################################################

>> For Loops:
Use for loops when there's a sequence of elements that you want to iterate.

>> While Loops:
Use while loops when you want to repeat an action until a condition changes


###################################################################################################################


>>> List Functions: []

When to use a List:
- ordered and changeable. Allows duplicate members.
- Use lists if you have a collection of data that does not need random access. 
- Choose lists when you need a simple, iterable collection that is modified frequently.

(len(nums))
(min(nums))
(max(nums))
zip(x,y)            	creates a pair from each value from two lists
" ".join(nums)      	returns a string by joining all the elements
nums.append()		Adds an element at the end of the list
nums.clear()		Removes all the elements from the list
nums.copy()		Returns a copy of the list
nums.count()		Returns the number of elements with the specified value
nums.index()		Returns the index of the first element with the specified value
nums.insert()		Adds an element at the specified position
nums.remove()		Removes the first item with the specified value
nums.reverse()		Reverses the order of the list
nums.sort()		Sorts the list
nums.pop()          	Returns the popped item whist removing it from the list

________________________________________________________

List Comprehension:

nums = [i*5 for i in range(0,5)]
print(nums)                                        --> [0, 5, 10, 15, 20]

words = ["Cam", "Noble", "Ash", "Bruh"]
wordlengths = [len(i)for i in words]
print(wordlengths)                                 --> [3, 5, 3, 4]

nums = [i*3 for i in range(0,5) if i % 2 == 0]
print(nums)                                        --> [0, 6, 12]


if all([i > 5 for i in nums]):                     -->   checks all items in the list against an argument, returns True/False

if any([i % 2 == 0 for i in nums]):                -->  checks any one of the items in the list against an argument, returns True/False

________________________________________________________

Enumerate:

nums = [55, 44, 33]
for i in enumerate(nums):
    print(i)                            
(0, 55) 
(1, 44) 
(2, 33)

people = ["Cam", "Max", "Ash"]
for index, i in enumerate(people):
    print("{} : {}".format(index + 1, i))             
1 : Cam
2 : Max
3 : Ash

________________________________________________________

Lists inside lists:

guests = [('Ken', 30, "Chef"), ("Pat", 35, 'Lawyer')]
for i in guests:
	for name, age, job in [i]:
		print("{} is {} years old and works as {}".format(name, str(age), job))
        

###################################################################################################################


>>> String Functions:

Format:

first = "Ash"
second = "is"
third = "funny"
formatted_string = "{1} {0} {2}?".format(first, second, third)                 -->  is Ash funny?

name = "Ash"
print(f"{name} is funny.")                                                     -->  Ash is funny

print("Base price: £{:.2f} Taxed price: £{:.2f}".format(7.348, 9.299))         -->  Base price: £7.35 Taxed price: £9.30

{:d}                - returns integer                                          --> '{:d}'.format(10.5)       → '10'
{:.2f}              - float number, with two digits decimal places             --> '{:.2f}'.format(0.5)      → '0.50'
{:.2s}              - string with that many characters                         --> '{:.2s}'.format('Python') → 'Py'
{:>6s}              - align the text six spaces to the right                   --> '{:<6s}'.format('Py')     → 'Py    '
{:<6s}              - align the text six spaces to the left                    --> '{:>6s}'.format('Py')     → '    Py'
{:^6s}              - string centered in that many spaces                      --> '{:^6s}'.format('Py')     → '  Py  '

________________________________________________________

txt.upper()		Converts a string into upper case
txt.lower()		Converts a string into lower case
txt.split()		Splits the string at the specified separator, and returns a list
txt.capitalize()	Converts the first character to upper case
txt.join()		Converts the elements of an iterable into a string
txt.startswith()    	Returns true if the string starts with the specified
txt.endswith()		Returns true if the string ends with the specified                    
txt.strip()         	removes any whitespace (spaces, and newlines) from the start and end of a string
txt.isalpha()       	Returns True if there are only alphabetic characters in the string
txt.isnumeric()  	Returns True if there are only numeric characters in the string

________________________________________________________

txt.format()		Formats specified values in a string
txt.replace(x, y)   	replaces x in a string with y in a string.
txt.index()		Searches the string for a specified value and returns the position   

________________________________________________________

txt = "Numbers: [404] This is an Error code"
index = txt.index("[")
print(txt[index+1:index+3])						--> 404


________________________________________________________

replace in string:

filenames = ["program.hpp", "stdio.hpp", "sample.hpp"]
newfilenames = [x.replace(".hpp", ".h") for x in filenames]
print(newfilenames)                                                     --> ["program.h", "studio.h", "sample.h"]


###################################################################################################################


>>> Integer Functions:

abs(x)              	Return the absolute value of a number. (-42 == 42)
round(x, 2)       	rounds to the nearest number ( 2 = second number in the int) ( 2.1237 --> 2.12 )


###################################################################################################################


>>> Dictionary Functions: {key:value}

When to use a dictionary:
- When you need a logical association between a key:value pair.
- When you need fast lookup for your data, based on a custom key.
- When your data is being constantly modified. Remember, dictionaries are mutable.

dict1			returns the full dictionary
dict1[key]		returns the value associated with key
dict1[key] = 2		adds an item into the dictionary {key : 2}
del dict1["key"]	removes the "key" item in the dictionary
"key" in dict1		returns True if "x" is in dict1, else returns False

dict1.clear()	   	Removes all the elements from the dictionary
dict1.copy()    	Returns a copy of the dictionary
dict1.get()	        Returns the value of the specified key
dict1.items()		Returns a list containing a tuple for each key value pair
dict1.keys()		Returns a list containing the dictionary's keys
dict1.update(dict2)	Updates dict1 with items coming from dict2. Existing entries will be replaced; new entries will be added.
dict1.values()		Returns a list of all the values in the dictionary

________________________________________________________

Dict Iteration:

dict1 = {"Cam":4, "Ash": 2, "Max":7}
for key, value in dict.items():
	print("{} has {} points".format(key, value))
	
-->
Cam has 4 points
Ash has 2 points
Max has 7 points

________________________________________________________

Dict Letter Counter:

def count_letters(text):
    count = {}
    for letter in text:
        if letter not in count:
            count[letter] = 0
        count[letter] += 1
    return count

print(count_letters("Hello"))

--> {'H': 1, 'e': 1, 'l': 2, 'o': 1}

________________________________________________________

Lists As Dict Values:

wardrobe = {"shirt":["red","blue","white"], "jeans":["blue","black"]}
for key, value in wardrobe.items():
	for i in value:
		print("{} {}".format(i , key))
-->
red shirt
blue shirt
white shirt
blue jeans
black jeans


###################################################################################################################


>>> Tuple Functions: ()

When to use a Tuple:
- ordered and unchangeable. Allows duplicate members.
- Use tuples when your data cannot change.

tupl.count()		Returns the number of times a specified value occurs in a tuple
tupl.index()		Searches the tuple for a specified value and returns the position


###################################################################################################################


>>> Set Functions: {}

When to use a Set:
- unordered, unchangeable, and unindexed. No duplicate members.
- Use a set if you need uniqueness for the elements.

add()			Adds an element to the set
remove()		Removes the specified element
clear()			Removes all the elements from the set
copy()			Returns a copy of the set
difference()		Returns a set containing the difference between two or more sets
intersection()		Returns a set, that is the intersection of two or more sets

first = {1, 2, 3, 4}
second = {4, 5, 6, 7}

print(first | second)       | combines two sets to form a new one containing items in either.
print(first & second)       & gets items only in both.
print(first - second)       - gets items in the first set but not in the second.
print(first ^ second)       ^ gets items in either set, but not both


###################################################################################################################


>>> import itertools

Infinite iterators:

itertools.count(10)                                 --> 10 11 12 13 14 ...
itertools.cycle('ABCD')                             --> A B C D A B C D ...
itertools.repeat(10, 3)                             --> 10 10 10

Iterators:

itertools.accumulate([1,2,3,4,5])                   --> 1 3 6 10 15
itertools.chain('ABC', 'DEF')                       --> A B C D E F
itertools.takewhile(lambda x: x<5, [1,4,6,4,1])     --> 1 4

Combinations:

itertools.product(("A", "B"), range(2))             --> [('A', 0), ('A', 1), ('B', 0), ('B', 1)]
itertools.permutations(("A", "B"))                  --> [('A', 'B'), ('B', 'A')]


###################################################################################################################


>>> import re

^            = match the start of a string
$            = match at the end of a string
.            = This matches any character except a newline (r"sp.m" == "spam")

[]           = Match a set of characters
[A-Z]        = matches any uppercase character from A to Z.
[a-z]        = matches any lowercase character from a to z
[0-9]        = matches any digit
[A-Za-z]     = matches any letter of any case
[^A-Z]       = matches any character other than the ones included

r"x(y)+"     = checks if "x" is followed by 1 or more "y" 
r"x(y)*"     = checks if "x" is followed by 0 or more "y" 
r"x(y)?"     = checks in "x" if followed by exactly 0-1 "y" 
r"x(y){3,4}" = checks in "x" if followed by exactly 3-4 "y" 

r"\[(\d+)\]"	    = checks for any characters inside "[ ]"
r"\w*[A-Z]\w*[0-9]" = checks if each at least 1 character is either uppercase or a number 
________________________________________________________

re.match("spam",""spamsausages"")                  --> returns True if string1 is in the start of string2

re.search("spam", "spamsausages")                  --> returns True if string1 is anywhere in string2

re.sub("Cam", "Ash", "My name is Ash")		   --> My name is Cam		--> replaces a string2 for string1 in the last string

________________________________________________________
                           
if re.search("spam$", "sausagespam"):
    print("Match")
else:
    print("No match")                              --> Match ($ = end of the string)


match = re.search("spam", "eggspamsausage")
if match:
    print(match.group())                           -->  spam
    print(match.start())                           -->  3
    print(match.end())                             -->  7
    print(match.span())                            -->  (3, 7)

________________________________________________________

print(re.findall("spam", "eggspamsausagespam"))    --> ['spam', 'spam']

________________________________________________________

re sub:

text = "My name is Cam."
print(re.sub("Cam", "Ash", text))                  --> My name is Ash.
                   
		   
nums = "003420"
print(re.sub(r"^00","+", nums))                    --> +3420

________________________________________________________
    
________________________________________________________

re.search:
    
pattern = r"[aeiou]"
if re.search(pattern, "grey"):
    print("Match 1")                               --> Match 


pattern = r"[A-Z][a-z][0-9]"
if re.search(pattern, "Ls8"):
    print("Match")                                 --> Match 


pattern = r"[0-5][0-9]"
if re.search(pattern, "58"):
    print("Match")                                 --> Match 


pattern = r"[^A-Za-z]"
if re.search(pattern, "19372"):
    print("Match")                                 --> Match	( ^ is the opposite )


pattern = r"x(y)*"
if re.search(pattern, "x"):
    print("Match") 				   --> Match	( "x" is followed by 0 or more "y" )


pattern = r"x(y)+"
if re.search(pattern, "xy"):
    print("Match") 				   --> Match	( "x" is followed by 1 or more "y" )


txt = "Error Code [39893] example txt"
pattern = r"\[(\d+)\]"
x = re.search(pattern, txt)
print(x)					   --> 39893

________________________________________________________

re match:

pattern = r"gr.y"
if re.match(pattern, "grey"):
    print("Match")                                 --> Match  ( . accepts any character)
    

pattern = r"colo(u)?r"
if re.match(pattern, "colour"):
    print("Match")				   --> Match	( "colo" is followed by 0-1 "u" )


pattern = r"\w*[A-Z]\w*[a-z]\w*[0-9]"
if re.match(pattern, "sC2y6Gc"):
    print("Match")				   --> Match	( checks if each at least 1 character is either uppercase, lowercase or a number )
    
    
###################################################################################################################

>>> File Commands
https://www.w3schools.com/python/python_ref_file.asp

Windows default directory- C:\Users\<Name>

________________________________________________________

Open --> Use --> Close: 

file = open("filename.txt")

open("filename.txt","x")			   -->	to create a file, failing if the file already exists
open("filename.txt","r")			   -->	open for reading (default)
open("filename.txt","w")			   -->	open for writing, (REPLACES EXISTING DATA)
open("filename.txt","a")			   -->	open for appending, writing  to the end of file if it exists
open("filename.txt","r+")			   -->	open for updating (reading and writing)
open("filename.txt","rb")			   -->	open for reading in binary

________________________________________________________

file.read(3)					   -->	
file.readline()					   -->
file.write()					   -->
file.close()					   -->	

________________________________________________________

Line Iteration:

with open("filename.txt") as file:		   -->
	print(file.read())


with open("filename.txt") as file:
	for line in file:
		print(line.strip().upper())	   -->
		
________________________________________________________

File line sort:

file = open("filename.txt")
lines = file.readlines()
print(lines.sort())	

________________________________________________________

guests = open("guests.txt", "w")
initial_guests = ["Bob", "Andrea", "Manuel", "Polly", "Khalid"]

for i in initial_guests:
    guests.write(i + "\n")
    
guests.close()


###################################################################################################################

>>> import os
https://docs.python.org/3/library/os.path.html

os.remove("filename.txt")
os.rename("oldname.txt","newname.txt")

________________________________________________________

os.path.dirname("filename.txt")			   -->
os.path.exists("filename.txt")			   -->  
os.path.getsize("filename.txt")			   -->  Return the size, in bytes
os.path.isfile("filename.txt")			   -->  specifies whether the path is existing file or not
os.path.isdir("directory")			   -->  specifies whether the path is existing directory or not
os.path.abspath("filename.txt")			   -->  Return a normalized absolutized version of the pathname path
os.path.join("maindir", "subdir")	           -->  returns maindir\subdir (for windows os) or maindir/subdir (for mac and linux)

os.path.getmtime("filename.txt")		   -->  last modification of path - returns number of seconds since the Epoch
os.path.getatime("filename.txt")		   -->  last access of path - returns number of seconds since the Epoch

________________________________________________________

import datetime

datetime.datetime.fromtimestamp(1666969873)					-->  datetime.datetime(2022, 10, 28, 16, 11, 13)

datetime.datetime.fromtimestamp(1666969873).strftime("%c")			-->  'Fri Oct 28 16:11:13 2022'

datetime.datetime.fromtimestamp(1666969873).strftime("%Y-%m-%d %H:%M:%S")	-->  '2022-10-28 16-11-13'

________________________________________________________

os.getcwd()					   -->  shows current working directory
os.mkdir("new_dir_name")			   -->  makes new directory in the current directory
os.rmdir("new_dir_name")			   --> 	deletes specific directory (only works if dir is empty)
os.chdir("dir_name")				   -->  change working directory
os.listdir("dir_name")				   --> 	lists all items inside of "dir_name" directory

________________________________________________________

Create directory if not exists:

if os.path.isdir("directory") == False:
    os.mkdir("directory")
else:
    pass
    
###################################################################################################################

>>> import csv

https://realpython.com/python-csv/
https://docs.python.org/3/library/csv.html

csv.writer()
csv.reader()
csv.DictReader()
csv.DictWriter()
________________________________________________________

opening csv files:

x = open(filename.txt)
y = csv.reader(x)

for row in y:
    print(row)

________________________________________________________

csv dict writer : 

users = [ {"FirstName" : "Cam" , "LastName" :" Tu"} , {"FirstName" : "Max" , "LastName" : "Pk"} ]
keys =  [ "FirstName" , "LastName" ]

with open("document.csv","w") as doc:
	writer = csv.DictWriter(doc, fieldname=keys)
	writer.writeheader()
	writer.writerows(users)
	
--> FirstName,LastName
    Cam,      Tu
    Max,      Pk

________________________________________________________

csv dict reader:

with open(filename) as f:
    reader = csv.DictReader(f)
    for row in reader:
      return_string = "{} {}".format(row["FirstName"], row["LastName"])
  return return_string

--> Cam Tu
    Max Pk

________________________________________________________




