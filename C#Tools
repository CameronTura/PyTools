 ______       ______   __  __   ______   ______   ______  
/\  ___\     /\  ___\ /\ \_\ \ /\  __ \ /\  == \ /\  == \ 
\ \ \____    \ \___  \\ \  __ \\ \  __ \\ \  __< \ \  _-/ 
 \ \_____\    \/\_____\\ \_\ \_\\ \_\ \_\\ \_\ \_\\ \_\   
  \/_____/     \/_____/ \/_/\/_/ \/_/\/_/ \/_/ /_/ \/_/   
                                                                                          
###################################################################################################################

>>> Create New Project Using Console:

  Go to docuemnts folder:
  --> cd Documents

  Create Dotnet:
  --> dotnet new console -o appname
  
  Open project:
  --> code .          (Need to be in the "appname" directory)
  
  
###################################################################################################################

>>> Starter Content:

using System;

namespace HelloWorld
{
  class Program
  {
    static void Main()
    {
      //Code Goes Here 
    }
  }
}
 
###################################################################################################################

 __  ___  __          __   __  
/__`  |  |__) | |\ | / _` /__` 
.__/  |  |  \ | | \| \__> .__/ 
                               
>>> Strings:

  Console.Write("Hello");                               --> Hello (No new line)
  
  Console.WriteLine("Hello World!");                    --> Hello World!
 
  string x = "Hello";
  string y = "World!";
  Console.WriteLine("{0} {1}", x, y);                   --> Hello World! 
  
###################################################################################################################

        __       ___  __  
| |\ | |__) |  |  |  /__` 
| | \| |    \__/  |  .__/ 
                          
>>> User String Input:

  string x = Console.ReadLine();
  Console.WriteLine("Hello {0}", x);                    --> Hello {UserName}
  
________________________________________________________
  
>>> User Int Input:
  
  int x = Convert.ToInt32(Console.ReadLine());
  Console.WriteLine(x + 5);                             --> {x + 5}
  
________________________________________________________

>>> User Double Input:


  double x = Convert.ToDouble(Console.ReadLine());
  Console.Writeline(x + 2.5);                           --> {x + 2.5}
________________________________________________________

>>> User Bool Input

  int x = Convert.ToInt32(Console.ReadLine());          (user input = 3)
  bool y = Convert.ToBoolean(x);
  Console.WriteLine("{0} as a Boolean = {1}.", x, y);   --> "3 as a Boolean = True"
  
  or:
  
  bool x = Convert.ToBoolean(Convert.ToInt32(Console.ReadLine()));
  Console.WriteLine(x);                                 --> True
  
  
###################################################################################################################

       ___ 
| |\ |  |  
| | \|  |  
           
>>> Int:

Console.WriteLine(6 + 4);               --> 10
Console.WriteLine(6 - 4);               --> 2
Console.Writeline(6 * 4);               --> 24
Console.WriteLine(6 / 4);               --> 1
Console.WriteLine(6 % 4);               --> 2 (returns the remainder)

________________________________________________________

x += 3; // equivalent to x = x + 3
x *= 8; // equivalent to x = x * 8
x /= 5; // equivalent to x = x / 5
x %= 2; // equivalent to x = x % 2
x++;    // equivalent to x = x + 1                      (uses the x value, then increments it)
++x;    // increments x's value then uses it
x--;    // equivalent to x = x - 1                      (uses the x value, then decreases it)
--x;    // decreases x's value then uses it

###################################################################################################################

 __   __        __        ___ 
|  \ /  \ |  | |__) |    |__  
|__/ \__/ \__/ |__) |___ |___ 
   
   
Float:
- 7 digits (32 bit)
- Least precise
- 1/3 = 0.33333334
   
Double:
- 15-16 digits (64 bit)
- Mid precise
- 1/3 = 0.3333333333333333

Decimal
- 28-29 significant digits (128 bit)
- Most precise
- 1.3 = 0.3333333333333333333333333333

###################################################################################################################

 __   __             ___  __   __     __        __  
/  ` /  \ |\ | \  / |__  |__) /__` | /  \ |\ | /__` 
\__, \__/ | \|  \/  |___ |  \ .__/ | \__/ | \| .__/ 
                                                    
>>> Conversions:

Convert.ToString()
Convert.ToInt32()
Convert.ToDouble()
Convert.ToBoolean()
________________________________________________________

  double doubleNum = 3.14;
  bool boolNum = System.Convert.ToBoolean(doubleNum);
  Console.WriteLine("{0} as a Boolean = {1}.", doubleNum, boolNum);
 
________________________________________________________
 

###################################################################################################################
 
 __   __        __  ___           ___  __  
/  ` /  \ |\ | /__`  |   /\  |\ |  |  /__` 
\__, \__/ | \| .__/  |  /~~\ | \|  |  .__/ 
                                           
>>> Constants:

-To store a value that cannot be changed from their initial assignment.

const double PI = 3.14; 

--> Any attempt to change PI will result in an error


###################################################################################################################

   ___     __  ___      ___  ___        ___      ___  __  
| |__     /__`  |   /\   |  |__   |\/| |__  |\ |  |  /__` 
| |       .__/  |  /~~\  |  |___  |  | |___ | \|  |  .__/ 
                                                          
>>> If Statements:

static void Main()
{
    int x = 23;
    int y = 12;
      
    if (x > y)
    {
        Console.WriteLine("x is bigger than y");
    }
    else
    {
        Console.WriteLine("y is bigger than x");
    }
}

--> x is bigger than y

________________________________________________________

Operators:
  6 == 4  ==  False;
  6 >= 4  ==  True;
  6 <= 4  ==  False;
  6 != 4  ==  True;
  
Logical Operators:
  && == AND
  || == OR
  ! == NOT
  
________________________________________________________  
  
NOT operator:
  
if (!(1 > 2))
{
    Console.WriteLine("1 is smaller than 2");
}
--> 1 is smaller than 2

________________________________________________________

? operator:

string msg = (14 > 18) ? "Welcome" : "Sorry";
Console.WriteLine(msg);
--> Sorry

string msg = (42 > 18) ? "Welcome" : "Sorry";
Console.WriteLine(msg);
--> Welcome

###################################################################################################################

 __         ___  __       
/__` |  | |  |  /  ` |__| 
.__/ |/\| |  |  \__, |  | 
                          
>>> Switch

- The switch statement provides a more elegant way to test a variable against a list of values.

static void Main(string[] args)
{
    int num = 2;
    switch (num)
    {
        case 1:
            Console.WriteLine("one");
            break;
        case 2:
            Console.WriteLine("two");
            break;
        case 3:
            Console.WriteLine("three");
            break;
        default:
            Console.Writeline("The number is not one of the cases")
    }
}

--> two

###################################################################################################################

                  ___          __   __   __   __  
|  | |__| | |    |__     |    /  \ /  \ |__) /__` 
|/\| |  | | |___ |___    |___ \__/ \__/ |    .__/ 
                                                  
>>> While Loops

- A while loop repeatedly executes a block of code as long as a given condition is true.

static void Main(string[] args)
{
    int number = 3;
    while(number >= 0)
    {
        Console.WriteLine(number);
        number--;
    }
}

--> 3
    2
    1
    0
    
###################################################################################################################

 __   __                       ___ 
|  \ /  \ __ |  | |__| | |    |__  
|__/ \__/    |/\| |  | | |___ |___ 
                                   
>>> Do-While

- A do-while loop is similar to a while loop, except that a do-while loop is guaranteed to execute at least one time
- Even if the condition of the do-while loop evaluates to false, the statements in the do will still run once:

static void Main(string[] args)
{
    int a = 0;
    do
    {
        Console.WriteLine(a);
        a++;
    } 
    while(a < 5);
}

--> 0
    1
    2
    3
    4
    
________________________________________________________

ask for user input infinitely: 

do {
  Console.Write("x = ");
  int x = Console.ReadLine();
  if (x == "exit")                                      ( "exit" breaks the loop )
    break;

  Console.WriteLine("Result: {0}", x);
}
while(true);

###################################################################################################################

 ___  __   __           __   __   __   __  
|__  /  \ |__)    |    /  \ /  \ |__) /__` 
|    \__/ |  \    |___ \__/ \__/ |    .__/ 
                                           
>>> For loops (Range)

- A for loop executes a set of statements a specific number of times

________________________________________________________

for ( value; condition; increment ) 
{
  statement(s);
}
________________________________________________________

static void Main(string[] args)
{
    for (int x = 1; x < 4; x++)
    {
        Console.WriteLine(x);
    }
}

--> 1
    2
    3
________________________________________________________

static void Main(string[] args)
{
    int y = 1;
    for ( ; y < 4; )
    {
        Console.WriteLine(y);
        y++;
    }
}

--> 1
    2
    3
    
________________________________________________________

Continue:

for(int i = 0; i < 5; i++)
{
    if(i == 3)
        continue;
        
    Console.WriteLine(i);
}

--> 0
    1
    2
    4

________________________________________________________

Break:

fo(int i = 0; i <5; i++)
{
    if(i == 3)
        break;
    
    Console.WriteLine(i);
}

--> 0
    1
    2

###################################################################################################################

       ___ ___       __   __   __  
 |\/| |__   |  |__| /  \ |  \ /__` 
 |  | |___  |  |  | \__/ |__/ .__/ 
                                   
>>> Methods (Def)

Write text:

namespace HelloWorld
{
    class Program
    {
        static void SayHi()                                 --> ( "void" means to specify that the method doesn't return a value )
        {
            Console.WriteLine("Hello");
        }
        static void Main(string[] args)                     --> ( "void Main is the execution of the program, " )
        {
            SayHi();
            SayHi();
            SayHi();
        }
    }
}
--> Hello
    Hello
    Hello

________________________________________________________

Return Numbers:

namespace HelloWorld
{
    class Program
    {
        static int Sum(int x, int y = 2)                    --> ( not "void" for when returning numbers ) ( y = 2 set as a default value )
        {
            return x+y;
        }
        static void Main(string[] args)
        {
            Console.WriteLine(Sum(8, 6));
            Console.WriteLine(Sum(3));
        }
    }
}
--> 14
    5

________________________________________________________

Define numbers in Main:

namespace HelloWorld
{
    class Program
    {
        static int Area(int h, int w)
        {
            return h * w;
        }
        static void Main(string[] args)
        {
            int res = Area(w: 5, h: 8);
            Console.WriteLine(res);
        }
    }
}

________________________________________________________

Example:

namespace Profiles
{
    class Program
    {
        static void Main(string[] args)
        {
            Settings("James", 25, "Spanish");
            Settings("Tom", 36);
        }
        static void Settings(string name, int age, string lang = "English")
        {
            Console.WriteLine("Name: " + name);
            Console.WriteLine("Age: " + age);
            Console.WriteLine("Language: " + lang);
        }
    }
}
--> Name: James
    Age: 25
    Language: Spanish
    Name: Tom
    Age: 36
    Language: English
    
###################################################################################################################

 __        __   __          __           __   __              ___      ___  __  
|__)  /\  /__` /__` | |\ | / _`     /\  |__) / _` |  |  |\/| |__  |\ |  |  /__` 
|    /~~\ .__/ .__/ | | \| \__>    /~~\ |  \ \__> \__/  |  | |___ | \|  |  .__/ 
                                                                                
>>> Passing Arguments

- There are three ways to pass arguments to a method when the method is called: By value, By reference, and as Output.

________________________________________________________

By value:
- make changes to the parameter within the method without having any effect on Main

namespace Hello
{
    class Program
    {
        static void Sqr(int x)
        {
            x = x * x;
            Console.WriteLine(x);                   --> ( The Sqr stores the value put into it because it is not returning anything )
        }
        static void Main(string[] args)
        {
            int a = 3;
            Sqr(a);
            
            Console.WriteLine(a);
        }
    }
}
--> 9
    3

________________________________________________________

By Reference:
- changes made to the parameter affect Main.

namespace Hello
{
    class Program
    {
        static void Sqr(ref int x)                  --> ( included "ref" into the method )
        {
            x = x * x;
        }
        static void Main(string[] args)
        {
            int a = 3;
            Sqr(ref a);                             --> ( "ref" copies an argument's memory address into the parameter )
             
            Console.WriteLine(a);
        }
    }
}
--> 9

________________________________________________________

By Output:
- Output parameters are similar to reference parameters, except that they transfer INTO main

namespace SoloLearn
{
    class Program
    {
        static void GetValues(out int x, out int y)
        {
            x = 5;
            y = 42;
        }
        static void Main(string[] args)
        {
            int a, b;
            GetValues(out a, out b);                    --> ( "GetValues" method called )
            Console.WriteLine(a+b);
        }
    }
}
--> 47

###################################################################################################################
       ___ ___       __   __      __        ___  __        __        __          __  
 |\/| |__   |  |__| /  \ |  \    /  \ \  / |__  |__) |    /  \  /\  |  \ | |\ | / _` 
 |  | |___  |  |  | \__/ |__/    \__/  \/  |___ |  \ |___ \__/ /~~\ |__/ | | \| \__> 
                                                                                     
>>> Method Overloading
- Overloading a Method means that you can have the same name for multiple methods but have it take in various parmiters (int, floats and strings)

Example:

namespace HelloWorld
{
    class Program
    {
        static void Print(int a) {                                      --> ( all of the methods have the same "Print" name and
            Console.WriteLine("Value: " + a);                               automatically decides what paramiters should go in which )
        }
        static void Print(double a) {                                   -->  ( An integer argument will only use the method that accepts an integer parameter, etc )
            Console.WriteLine("Value: " + a);
        }
        static void Print(string label, double a) {
            Console.WriteLine(label + a);
        }
        static void Main(string[] args)
        {
            Print(11);
            Print(4.13);
            Print("Average: ", 7.57);
        }
    }
}
--> Value: 11
    Value: 4.13
    Average: 7.57

###################################################################################################################
 __   ___  __        __   __     __       
|__) |__  /  ` |  | |__) /__` | /  \ |\ | 
|  \ |___ \__, \__/ |  \ .__/ | \__/ | \| 
                                          
>>> Recursion

Factorial:

static int Fact(int num) {
  if (num == 1) {
    return 1;
  }
  return num * Fact(num - 1);
}

###################################################################################################################
 ______     ______     ______  
/\  __ \   /\  __ \   /\  == \ 
\ \ \/\ \  \ \ \/\ \  \ \  _-/ 
 \ \_____\  \ \_____\  \ \_\   
  \/_____/   \/_____/   \/_/   

>>> OOP

example:

namespace HelloWorld
{
    class Program
    {
        class Dog                                           // --> ( Creates a new "Dog" Class ) 
        {
            public string name;                             // --> ( has age and name fields) 
            public int age;                                 // --> ( "public" can be accessed from outside the class )
            
            public void SayHi()                             // --> ( Creating a public method )
            {
                Console.WriteLine("Hi im " + name);
            }
        }
        static void Main(string[] args)                     // --> ( The main function ) 
        {
            Dog ash = new Dog();                            // --> ( Declares an "ash" Dog using the "new" command ) 
            ash.name = "Ash";                               // --> ( Gives "ash" a name and age)
            ash.age = 3;
            
            Console.WriteLine(ash.age);                     // --> ( Calls the Dog "ash" age)
            ash.SayHi();                                    // --> ( Calls the "SayHi()" method using "ash" )
        }
    }
}

