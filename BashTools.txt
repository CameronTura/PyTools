BashTools
==========

echo "Hello World!"                         --> much like the "print" command in python

date                                        --> prints the current date

who                                         --> prints the list of users currently logged into the computer

man                                         --> shows the manual page of the given command (press "q" to quit)

uptime                                      --> shows how long the computer has been running

free                                        --> shows the amount of unused memory on the current system  


___________________________________________________________

List Directorys:

ls dirname                                  --> lists the contents of the received directory

ls -l                                       --> -l includes extra information ( permissions / size / user / date / name)

ls -la                                      --> same as -l but also shows hidden files


___________________________________________________________

Directorys:

mkdir dirname                               --> makes new directory named "dirname"

cd dirname                                  --> changes current directory to "dirname"

cd ..                                       --> changes to the previous directory

pwd                                         --> Print current working directory

rmdir dirname/                              --> deletes the "dirname" directory 
                                                (must be in the parent directory) 
                                                (one being deleted must be empty )

___________________________________________________________

Create Files:

touch myfile.txt                            --> creates a new txt file named "myfile"

mv myfile.txt newfile.txt                   --> renames "myfile.txt" to "newfile.txt"

chmod                                       --> change the properties of a file

echo *.py                                   --> displays all filenames that end with ".py"

echo py*                                    --> displays all filenames that start with "py"

___________________________________________________________

Add to Files:

echo "Hello World!" > filename.txt          --> prints "Hello World!" onto a new txt file named "filename.txt"

echo "Hello World!" >> filename.txt         --> appends "Hello World!" onto the txt file named "filename.txt"

cat filename.txt                            --> view the filename.txt file

___________________________________________________________

File Contents:

cat filename.txt tr "x" "y"                 --> transforms every "x" to a "y" in a file

cat filename.txt sort                       --> alphabetically sorts the contents in the file

cat filename.txt -nr                        --> numerically sorts the contents in the file and in reverse order

cat filename.txt uniq -c                    --> shows the number of times each word appears in the file

cat filename.txt head                       --> prints the first 10 lines to std out

cat filename.txt less                       --> scrolls through the contents of the given file (press "q" to quit)

cat filename.txt wc                         --> counts the amount of characters, words, and lines in the given file


___________________________________________________________

Remove Files:

rm filename.txt                             --> deletes "filename.txt"

rm *                                        --> deletes all in the current directory

___________________________________________________________

Copy/Paste:

cp                                          --> copy / paste

cp filename.txt anotherfile.txt             --> creates a copy of "filename.txt" named "anotherfile.txt"

cp ../filename.txt .                        --> finds "filename.txt" in the parent directory and places it in the current directory

_______________________________________________________________________________________________________


>>> I/O streams:


./example.py > filename.txt                 --> ">" the std output from "example.py" will be printed onto the file named "filename.txt" 
                                                (if file does not exist it is created)
                                                (file will be overwritten every time this event occours)
                                                
./example.py >> filename.txt                --> ">>" appends the std output from "example.py" onto the file named "filename.txt" 
                                                (does not overwrite existing data)

./example.py < filename.txt                 --> "<" "example.py" takes the "filename.txt" as a input for a user input field
                                                (reads up until a newline "\n" character)
                                                
                                                
./example.py 2> filename.txt                --> "2>" only the err (error) output from "example.py" will get printed onto the "filename.txt" file


./example.py < input.txt >> output.txt      --> takes "input.txt" as input and appends the output onto "output.txt" file

___________________________________________________________

>>> " | " Pipes:

cat filename.txt | ./sys_example.py         --> (see line x) runs "filename.txt" through an sys.stdin in "sys_example.py"
                                                (must import sys and use stdin in the python project)

cat filename.txt | tr " " "\n" | uniq -c | sort -nr     --> (see line 45) preforms a set of actions in order


_______________________________________________________________________________________________________

>>> Signals:

ctrl + c                                    --> to clean exit

ctrl + z                                    --> to stop , "fg" to restart

ps                                          --> list currently running processes

ps ax | grep | ping                         --> list currently running processes, only show the processes with "ping" in the name

jobs                                        --> lists the jobs currently running or stopped 

kill 4619                                   --> force stops the "4619" {PID} process

top                                         --> shows the processes currently using the most CPU time (press "q" to quit) 

ping www.example.com                        --> Sends ICMP packets to "example.com" once a second over a network 


_______________________________________________________________________________________________________

>>> ./script.sh

make sure script has:
#!/bin/sh

in terminal:
chmod 755 script.sh

./script.sh                                 --> should run the file

_______________________________________________________________________________________________________


>>> Bash Scripting:

https://ryanstutorials.net/bash-scripting-tutorial/
https://linuxconfig.org/bash-scripting-tutorial-for-beginners

___________________________________________________________

echo "the date is $(date)"                  --> the date is Thu 09 2021...

example=hello                                   (no spaces before or after "=")
echo $example                               --> hello

echo *.py                                   --> displays all filenames that end with ".py"

echo py*                                    --> displays all filenames that start with "py"

echo ?????.py                               --> displays any file with 5 charaters that end with ".py") ("?" is a placeholder for any character)

___________________________________________________________

Bash if/else example:

if grep "filename" /dirname; then
        echo "File found"
else
        echo "Error, File not found"
fi                                          --> ("fi" = finished)

--> File found




